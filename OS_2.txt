OS_2
The shell is divided into six files. We need to compile the external command files including the main shell file and then run shell.c executable to start the shell. The format assumed is [command] -[flag] [arguments] Here is a brief description of all the shell commands used along with their options:


1. echo: This command is used to print text to stdout. The two flags that I have handled are -n and -e. -n flag is used to omit a newline after the text is printed. -e is used to parse the backslash characters as well. In my case, I have assumed that the backslash character is only of the form ‘\n’ that is newline. Errors handled are: invalid flag and invalid format.
2. cd: This command is used to change the current working directory. The two flags handled are -h and -P. -h is used to show all the information about the command. -P is used to change directory via physical path instead of logical one. Errors handled are: no help file found, invalid flag, no such directory.
3. pwd: This command is used to print the current working directory. The two flags handled are -h and -P. -h is used to show all the information about the command. -P is used to print the physical path of the current working directory instead of the logical one. Errors handled are: Invalid argument to getcwd, invalid flag, invalid arguments to command.
4. history: This command is used to print history of all the commands stored in the history file. I have maintained a history.txt text file to store history across sessions. Two flags implemented are: -c and -s. -c flag is used to clear the history. -s flag is used to append arbitrary text to the history file. The text to be appended is given as argument.
Errors handled are: history file could not be loaded, invalid flag and invalid arguments.
5. exit: This command is used to exit the shell. There is no flag or arguments associated with it.
6. ls: This command is used to list all the files and directories in a directory. If no argument is given, it prints the contents of the current working directory. Otherwise it prints the contents of the directory passed to it. The two options implemented are -a and -l. -a is used to print the parent as well as the current directory i.e. “..” and “.”. The -l command is used to display all the information related to each file and directory in the target directory. This includes permissions, owner id, group id, size, date last modified and name. Errors handled: No such directory, invalid flags and invalid arguments.
7. date: This command prints the current date and time. The two flags handled are: -u and -R. The -u flag is used to print the date and time in UTC time zone. -R prints date in RFC 2822 date format. Errors handled are: invalid arguments and invalid flags.
8. cat: This command prints the contents of a file. If no file is given, it just prints the input line given to it. The two flags handled are: -b and -n. -b numbers all the non-empty lines. -n numbers all the lines regardless of their content. The errors handled are: no such file and invalid flag.
9. mkdir: mkdir command is used to make directories. The two flags handled are -v and -m [mode]. -v tells explicitly the name of the directory created. -m [mode] is used to specify all the permissions of the directory. The errors handled are: directory already exists, permission denied, invalid flag and no such file.
10. rm: rm command is used to remove a file. The two flags handled are: -v and -d. -v tells explicitly the name of the directory removed. -d flag is used to specify that we can remove not just file but also directories. Errors handled are: permission denied, invalid flags, invalid arguments, operation not permitted (if we try to remove directory without -d flag).